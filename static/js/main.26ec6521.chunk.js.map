{"version":3,"sources":["../../src/useOutsideClickHandler.ts","Modal/index.tsx","Modal/Modal.tsx","App.js","index.js"],"names":["noop","node","onOutsideClick","onInsideClick","isOpen","handleClick","e","current","contains","target","removeDocumentEventListener","document","removeEventListener","addEventListener","Modal","React","props","ref","children","visible","onClose","className","onClick","App","useRef","useState","modalOpen","setModalOpen","toggleModal","useOutsideClick","dismissible","ReactDOM","render","getElementById"],"mappings":"kRASMA,EAAO,WAAM,aAEb,EAAyB,SAAC,G,IAAEC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,cAAeC,EAAA,EAAAA,OACnED,EAAgBA,GAAiBH,EAEjC,IAAMK,EAAc,SAACC,GACjB,IAAMC,EAAkBN,GAAUA,EAAKM,QAAWN,EAAKM,QAAU,KAC5DA,IAEDA,EAAQC,SAASF,EAAEG,QAEnBN,GAAiBA,IAIrBD,MAIEQ,EAA8B,WAAM,OAAAC,SAASC,oBAAoB,YAAaP,IAEpF,qBAAU,WAON,OANID,EAJkCO,SAASE,iBAAiB,YAAaR,GAOzEK,IAGG,WACHA,OAEL,CAACN,KCtCOU,G,MCCDC,cAAiB,SAACC,EAAYC,GAAc,IAC9CC,EAA+BF,EAA/BE,SAAUC,EAAqBH,EAArBG,QAASC,EAAYJ,EAAZI,QAE3B,OAAKD,EAGD,uBAAKE,UAAU,YAAYJ,IAAKA,GAC5B,uBAAKI,UAAU,WACX,0BAAQA,UAAU,YAAYC,QAASF,GAAvC,KAGCF,IARQ,SC0BVK,EA5BH,WACR,IAAMtB,EAAOc,IAAMS,OAAO,MADZ,EAEoBT,IAAMU,UAAS,GAFnC,mBAEPC,EAFO,KAEIC,EAFJ,KAGRC,EAAc,kBAAMD,GAAcD,IAQxC,OANAG,EAAgB,CACZ5B,OACAC,eAAgB0B,EAChBxB,OAAQsB,IAIR,6BACI,4BAAQJ,QAASM,GAAjB,iBAIA,kBAAC,EAAD,CACIT,QAASO,EACTI,aAAa,EACbV,QAASQ,EACTX,IAAKhB,GAJT,SCfZ8B,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,W","file":"static/js/main.26ec6521.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\ninterface useOutsideClickHandlerProps {\n    node: any, // reference to top level node / element in the collapsible component.\n    isOpen: boolean,\n    onOutsideClick: (data?: any) => void,\n    onInsideClick?: (data?: any) => void,\n}\n\nconst noop = () => null;\n\nconst useOutsideClickHandler = ({ node, onOutsideClick, onInsideClick, isOpen }: useOutsideClickHandlerProps) => {\n    onInsideClick = onInsideClick || noop;\n\n    const handleClick = (e: any) => {\n        const current: any = (!!node && !!node.current) ? node.current : null;\n        if (!current) return;\n\n        if (current.contains(e.target)) {\n            // inside click\n            onInsideClick && onInsideClick();\n            return;\n        }\n        // outside click\n        onOutsideClick();\n    };\n\n    const attachDocumentEventListener = () => document.addEventListener(\"mousedown\", handleClick);\n    const removeDocumentEventListener = () => document.removeEventListener(\"mousedown\", handleClick);\n\n    useEffect(() => {\n        if (isOpen) {\n            attachDocumentEventListener();\n        } else {\n            removeDocumentEventListener();\n        }\n\n        return () => {\n            removeDocumentEventListener();\n        };\n    }, [isOpen]);\n };\n\nexport default useOutsideClickHandler;\n","import Modal from './Modal';\n\nexport default Modal;\n","import * as React from 'react';\nimport './Modal.css';\n\nconst Modal = React.forwardRef((props: any, ref: any) => {\n    const { children, visible, onClose } = props;\n\n    if (!visible) return null;\n\n    return (\n        <div className='inner-box' ref={ref}>\n            <div className='content'>\n                <button className='close-btn' onClick={onClose}>\n                    X\n                </button>\n                {children}\n            </div>\n        </div>\n    );\n})\n\nexport default Modal;\n","import React from 'react';\nimport { useOutsideClick } from 'use-outside-click';\nimport Modal from './Modal';\n\nconst App = () => {\n    const node = React.useRef(null);\n    const [modalOpen, setModalOpen] = React.useState(false);\n    const toggleModal = () => setModalOpen(!modalOpen);\n\n    useOutsideClick({\n        node,\n        onOutsideClick: toggleModal,\n        isOpen: modalOpen\n    });\n\n    return (\n        <div>\n            <button onClick={toggleModal}>\n                Toggle Modal!\n            </button>\n\n            <Modal\n                visible={modalOpen}\n                dismissible={true}\n                onClose={toggleModal}\n                ref={node}\n            >\n                Yo!\n            </Modal>\n        </div>\n    )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}